{"id":"2c2f7699-c380-4022-a901-b731bf416b20","data":{"nodes":[{"id":"ParseData-XhkUG","type":"genericNode","position":{"x":937.466008162972,"y":264.496002453545},"data":{"description":"Convert Data into plain text following a specified template.","display_name":"Parse Data","id":"ParseData-XhkUG","node":{"base_classes":["Message"],"beta":false,"conditional_paths":[],"custom_fields":{},"description":"Convert Data into plain text following a specified template.","display_name":"Parse Data","documentation":"","edited":false,"field_order":["data","template","sep"],"frozen":false,"icon":"braces","output_types":[],"outputs":[{"cache":true,"display_name":"Text","method":"parse_data","name":"text","selected":"Message","types":["Message"],"value":"__UNDEFINED__"}],"pinned":false,"template":{"_type":"Component","code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n"},"data":{"advanced":false,"display_name":"Data","dynamic":false,"info":"The data to convert to text.","input_types":["Data"],"list":false,"name":"data","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"other","value":""},"sep":{"advanced":true,"display_name":"Separator","dynamic":false,"info":"","list":false,"load_from_db":false,"name":"sep","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"str","value":"\n"},"template":{"advanced":false,"display_name":"Template","dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","input_types":["Message"],"list":false,"load_from_db":false,"multiline":true,"name":"template","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":"{text}"}}},"type":"ParseData"},"selected":false,"width":384,"height":384},{"id":"Prompt-bd0HK","type":"genericNode","position":{"x":1333.5160184880344,"y":413.04561501392186},"data":{"description":"Create a prompt template with dynamic variables.","display_name":"Prompt","id":"Prompt-bd0HK","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_build_config: dict, current_build_config: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_build_config, current_build_config)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_build_config\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_build_config[\"template\"])\n        return frontend_node\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"template":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":"{context}\n\n---\nGiven the context above, answer the question as best as possible. and if the question is general answer generaly\n\nQuestion : {question}\n\nAnswer: ","name":"template","display_name":"Template","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"prompt","load_from_db":false},"context":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"context","display_name":"context","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"question":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"question","display_name":"question","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"}},"description":"Create a prompt template with dynamic variables.","icon":"prompts","is_input":null,"is_output":null,"is_composition":null,"base_classes":["Message"],"name":"","display_name":"Prompt","documentation":"","custom_fields":{"template":["context","question"]},"output_types":[],"full_path":null,"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"prompt","hidden":null,"display_name":"Prompt Message","method":"build_prompt","value":"__UNDEFINED__","cache":true}],"field_order":["template","template"],"beta":false,"error":null,"edited":true},"type":"Prompt"},"selected":false,"width":384,"height":515},{"id":"ChatOutput-A46us","type":"genericNode","position":{"x":2180.942432022942,"y":36.45118759533818},"data":{"description":"Display a chat message in the Playground.","display_name":"Chat Output","id":"ChatOutput-A46us","node":{"base_classes":["Message"],"beta":false,"conditional_paths":[],"custom_fields":{},"description":"Display a chat message in the Playground.","display_name":"Chat Output","documentation":"","edited":false,"field_order":["input_value","store_message","sender","sender_name","session_id","data_template"],"frozen":false,"icon":"ChatOutput","output_types":[],"outputs":[{"cache":true,"display_name":"Message","method":"message_response","name":"message","selected":"Message","types":["Message"],"value":"__UNDEFINED__"}],"pinned":false,"template":{"_type":"Component","code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"Machine\",\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\", display_name=\"Sender Name\", info=\"Name of the sender.\", value=\"AI\", advanced=True\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if self.session_id and isinstance(message, Message) and isinstance(message.text, str):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n"},"data_template":{"advanced":true,"display_name":"Data Template","dynamic":false,"info":"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.","input_types":["Message"],"list":false,"load_from_db":false,"name":"data_template","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":"{text}"},"input_value":{"advanced":false,"display_name":"Text","dynamic":false,"info":"Message to be passed as output.","input_types":["Message"],"list":false,"load_from_db":false,"name":"input_value","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"sender":{"advanced":true,"display_name":"Sender Type","dynamic":false,"info":"Type of sender.","name":"sender","options":["Machine","User"],"placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"str","value":"Machine"},"sender_name":{"advanced":true,"display_name":"Sender Name","dynamic":false,"info":"Name of the sender.","input_types":["Message"],"list":false,"load_from_db":false,"name":"sender_name","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":"AI"},"session_id":{"advanced":true,"display_name":"Session ID","dynamic":false,"info":"Session ID for the message.","input_types":["Message"],"list":false,"load_from_db":false,"name":"session_id","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"store_message":{"advanced":true,"display_name":"Store Messages","dynamic":false,"info":"Store the message in the history.","list":false,"name":"store_message","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"bool","value":true}}},"type":"ChatOutput"},"selected":false,"width":384,"height":308},{"id":"AIMLAPIModel-tsWmW","type":"genericNode","position":{"x":1766.2789805885257,"y":353.8992236098023},"data":{"description":"Generates text using AIMLAPI LLMs.","display_name":"OpenAI","id":"AIMLAPIModel-tsWmW","node":{"template":{"_type":"Component","aimlapi_api_key":{"load_from_db":false,"required":false,"placeholder":"","show":true,"value":"8b0c581f30a84fd6842d50bfd2fbed0c","name":"aimlapi_api_key","display_name":"AIMLAPI API Key","advanced":false,"input_types":[],"dynamic":false,"info":"The AIMLAPI API Key to use for the AIMLAPI model.","title_case":false,"password":true,"type":"str"},"aimlapi_base":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"aimlapi_base","display_name":"AIMLAPI Base","advanced":true,"dynamic":false,"info":"The base URL of the AIMLAPI API. Defaults to https://api.aimlapi.com.","title_case":false,"type":"str"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import operator\nfrom functools import reduce\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.constants import STREAM_INFO_TEXT\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    MessageInput,\n    SecretStrInput,\n    StrInput,\n)\n\nclass AIMLAPIModelComponent(LCModelComponent):\n    display_name = \"AIMLAPI\"\n    description = \"Generates text using AIMLAPI LLMs.\"\n    icon = \"line-chart\"\n    name = \"AIMLAPIModel\"\n\n    inputs = [\n        MessageInput(name=\"input_value\", display_name=\"Input\"),\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DictInput(\n            name=\"output_schema\",\n            is_list=True,\n            display_name=\"Schema\",\n            advanced=True,\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\n        ),\n        DropdownInput(\n            name=\"model_name\", display_name=\"Model Name\", advanced=False, options=MODEL_NAMES, value=MODEL_NAMES[0]\n        ),\n        StrInput(\n            name=\"aimlapi_base\",\n            display_name=\"AIMLAPI Base\",\n            advanced=True,\n            info=\"The base URL of the AIMLAPI API. Defaults to https://api.aimlapi.com.\",\n        ),\n        SecretStrInput(\n            name=\"aimlapi_api_key\",\n            display_name=\"AIMLAPI API Key\",\n            info=\"The AIMLAPI API Key to use for the AIMLAPI model.\",\n            advanced=False,\n            value=\"AIMLAPI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        BoolInput(name=\"stream\", display_name=\"Stream\", info=STREAM_INFO_TEXT, advanced=True),\n        StrInput(\n            name=\"system_message\",\n            display_name=\"System Message\",\n            info=\"System message to pass to the model.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\n        aimlapi_api_key = '0f6cfe3d82254c6f83395b4a6bdc32fd'\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        aimlapi_base = self.aimlapi_base or \"https://api.aimlapi.com\"\n        json_mode = bool(output_schema_dict) or self.json_mode\n        seed = self.seed\n        model_kwargs[\"seed\"] = seed\n\n        if aimlapi_api_key:\n            api_key = '0f6cfe3d82254c6f83395b4a6bdc32fd'\n        else:\n            api_key = '0f6cfe3d82254c6f83395b4a6bdc32fd'\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=aimlapi_base,\n            api_key=api_key,\n            temperature=temperature or 0.1,\n        )\n        if json_mode:\n            if output_schema_dict:\n                output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")  # type: ignore\n            else:\n                output = output.bind(response_format={\"type\": \"json_object\"})  # type: ignore\n\n        return output  # type: ignore\n\n    def _get_exception_message(self, e: Exception):\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")  # type: ignore\n            if message:\n                return message\n        return","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"input_value","display_name":"Input","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str"},"json_mode":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"json_mode","display_name":"JSON Mode","advanced":true,"dynamic":false,"info":"If True, it will output JSON regardless of passing a schema.","title_case":false,"type":"bool"},"max_tokens":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"max_tokens","display_name":"Max Tokens","advanced":true,"dynamic":false,"info":"The maximum number of tokens to generate. Set to 0 for unlimited tokens.","title_case":false,"type":"int"},"model_kwargs":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":{},"name":"model_kwargs","display_name":"Model Kwargs","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"dict"},"model_name":{"trace_as_metadata":true,"options":["gpt-4o","gpt-4-turbo","gpt-4-turbo-preview","gpt-4","gpt-3.5-turbo","gpt-3.5-turbo-0125"],"required":false,"placeholder":"","show":true,"value":"gpt-4o","name":"model_name","display_name":"Model Name","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"str"},"output_schema":{"trace_as_input":true,"list":true,"required":false,"placeholder":"","show":true,"value":{},"name":"output_schema","display_name":"Schema","advanced":true,"dynamic":false,"info":"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.","title_case":false,"type":"dict"},"seed":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":1,"name":"seed","display_name":"Seed","advanced":true,"dynamic":false,"info":"The seed controls the reproducibility of the job.","title_case":false,"type":"int"},"stream":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"stream","display_name":"Stream","advanced":true,"dynamic":false,"info":"Stream the response from the model. Streaming works only in Chat.","title_case":false,"type":"bool"},"system_message":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"system_message","display_name":"System Message","advanced":true,"dynamic":false,"info":"System message to pass to the model.","title_case":false,"type":"str"},"temperature":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"0.3","name":"temperature","display_name":"Temperature","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"float","load_from_db":false}},"description":"Generates text using AIMLAPI LLMs.","icon":"line-chart","base_classes":["LanguageModel","Message"],"display_name":"AIML API CHATBOT","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text_output","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true},{"types":["LanguageModel"],"selected":"LanguageModel","name":"model_output","display_name":"Language Model","method":"build_model","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","max_tokens","model_kwargs","json_mode","output_schema","model_name","aimlapi_base","aimlapi_api_key","temperature","stream","system_message","seed"],"beta":false,"edited":true},"type":"AIMLAPIModel"},"selected":false,"width":384,"height":621},{"id":"Pinecone-zqmTC","type":"genericNode","position":{"x":388.3020797424583,"y":-33.443845553039054},"data":{"type":"Pinecone","node":{"template":{"_type":"Component","embedding":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"embedding","display_name":"Embedding","advanced":false,"input_types":["Embeddings"],"dynamic":false,"info":"","title_case":false,"type":"other"},"ingest_data":{"trace_as_input":true,"trace_as_metadata":true,"list":true,"required":false,"placeholder":"","show":true,"value":"","name":"ingest_data","display_name":"Ingest Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"","title_case":false,"type":"other"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import List\n\nfrom langchain_pinecone import Pinecone\n\nfrom langflow.base.vectorstores.model import LCVectorStoreComponent\nfrom langflow.helpers.data import docs_to_data\nfrom langflow.io import (\n    DropdownInput,\n    HandleInput,\n    IntInput,\n    StrInput,\n    SecretStrInput,\n    DataInput,\n    MultilineInput,\n)\nfrom langflow.schema import Data\n\n\nclass PineconeVectorStoreComponent(LCVectorStoreComponent):\n    display_name = \"Pinecone\"\n    description = \"Pinecone Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/v0.2/docs/integrations/vectorstores/pinecone/\"\n    name = \"Pinecone\"\n    icon = \"Pinecone\"\n\n    inputs = [\n        StrInput(name=\"index_name\", display_name=\"Index Name\", required=True),\n        StrInput(name=\"namespace\", display_name=\"Namespace\", info=\"Namespace for the index.\"),\n        DropdownInput(\n            name=\"distance_strategy\",\n            display_name=\"Distance Strategy\",\n            options=[\"Cosine\", \"Euclidean\", \"Dot Product\"],\n            value=\"Cosine\",\n            advanced=True,\n        ),\n        SecretStrInput(name=\"pinecone_api_key\", display_name=\"Pinecone API Key\", required=True),\n        StrInput(\n            name=\"text_key\",\n            display_name=\"Text Key\",\n            info=\"Key in the record to use as text.\",\n            value=\"text\",\n            advanced=True,\n        ),\n        MultilineInput(name=\"search_query\", display_name=\"Search Query\"),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            value=4,\n            advanced=True,\n        ),\n    ]\n\n    def build_vector_store(self) -> Pinecone:\n        return self._build_pinecone()\n\n    def _build_pinecone(self) -> Pinecone:\n        from langchain_pinecone._utilities import DistanceStrategy\n        from langchain_pinecone.vectorstores import Pinecone\n\n        distance_strategy = self.distance_strategy.replace(\" \", \"_\").upper()\n        _distance_strategy = DistanceStrategy[distance_strategy]\n\n        pinecone = Pinecone(\n            index_name=self.index_name,\n            embedding=self.embedding,\n            text_key=self.text_key,\n            namespace=self.namespace,\n            distance_strategy=_distance_strategy,\n            pinecone_api_key=self.pinecone_api_key,\n        )\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n\n        if documents:\n            pinecone.add_documents(documents)\n\n        return pinecone\n\n    def search_documents(self) -> List[Data]:\n        vector_store = self._build_pinecone()\n\n        if self.search_query and isinstance(self.search_query, str) and self.search_query.strip():\n            docs = vector_store.similarity_search(\n                query=self.search_query,\n                k=self.number_of_results,\n            )\n\n            data = docs_to_data(docs)\n            self.status = data\n            return data\n        else:\n            return []\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"distance_strategy":{"trace_as_metadata":true,"options":["Cosine","Euclidean","Dot Product"],"required":false,"placeholder":"","show":true,"value":"Cosine","name":"distance_strategy","display_name":"Distance Strategy","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str"},"index_name":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":true,"placeholder":"","show":true,"value":"aziz","name":"index_name","display_name":"Index Name","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"str"},"namespace":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"Chatbot","name":"namespace","display_name":"Namespace","advanced":false,"dynamic":false,"info":"Namespace for the index.","title_case":false,"type":"str"},"number_of_results":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":4,"name":"number_of_results","display_name":"Number of Results","advanced":true,"dynamic":false,"info":"Number of results to return.","title_case":false,"type":"int"},"pinecone_api_key":{"load_from_db":false,"required":true,"placeholder":"","show":true,"value":"87be3edc-a627-4dc7-9122-bd1c3096b0e0","name":"pinecone_api_key","display_name":"Pinecone API Key","advanced":false,"input_types":[],"dynamic":false,"info":"","title_case":false,"password":true,"type":"str"},"search_query":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"search_query","display_name":"Search Query","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str"},"text_key":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"text","name":"text_key","display_name":"Text Key","advanced":true,"dynamic":false,"info":"Key in the record to use as text.","title_case":false,"type":"str"}},"description":"Pinecone Vector Store with search capabilities","icon":"Pinecone","base_classes":["Data","Retriever","VectorStore"],"display_name":"Pinecone","documentation":"https://python.langchain.com/v0.2/docs/integrations/vectorstores/pinecone/","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Retriever"],"selected":"Retriever","name":"base_retriever","display_name":"Retriever","method":"build_base_retriever","value":"__UNDEFINED__","cache":true},{"types":["Data"],"selected":"Data","name":"search_results","display_name":"Search Results","method":"search_documents","value":"__UNDEFINED__","cache":true},{"types":["VectorStore"],"selected":"VectorStore","name":"vector_store","display_name":"Vector Store","method":"cast_vector_store","value":"__UNDEFINED__","cache":true}],"field_order":["index_name","namespace","distance_strategy","pinecone_api_key","text_key","search_query","ingest_data","embedding","number_of_results"],"beta":false,"edited":false},"id":"Pinecone-zqmTC","description":"Pinecone Vector Store with search capabilities","display_name":"Pinecone"},"selected":true,"width":384,"height":765,"dragging":false,"positionAbsolute":{"x":388.3020797424583,"y":-33.443845553039054}},{"id":"ChatInput-a8STv","type":"genericNode","position":{"x":-218.65866953003,"y":-29.079092569969987},"data":{"type":"ChatInput","node":{"template":{"_type":"Component","files":{"trace_as_metadata":true,"file_path":"","fileTypes":["txt","md","mdx","csv","json","yaml","yml","xml","html","htm","pdf","docx","py","sh","sql","js","ts","tsx","jpg","jpeg","png","bmp","image"],"list":true,"required":false,"placeholder":"","show":true,"value":"","name":"files","display_name":"Files","advanced":true,"dynamic":false,"info":"Files to be sent with the message.","title_case":false,"type":"file"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"User\",\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=\"User\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if self.session_id and isinstance(message, Message) and isinstance(message.text, str):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"helo","name":"input_value","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Message to be passed as input.","title_case":false,"type":"str"},"sender":{"trace_as_metadata":true,"options":["Machine","User"],"required":false,"placeholder":"","show":true,"value":"User","name":"sender","display_name":"Sender Type","advanced":true,"dynamic":false,"info":"Type of sender.","title_case":false,"type":"str"},"sender_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"User","name":"sender_name","display_name":"Sender Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Name of the sender.","title_case":false,"type":"str"},"session_id":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"session_id","display_name":"Session ID","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Session ID for the message.","title_case":false,"type":"str"},"store_message":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":true,"name":"store_message","display_name":"Store Messages","advanced":true,"dynamic":false,"info":"Store the message in the history.","title_case":false,"type":"bool"}},"description":"Get chat inputs from the Playground.","icon":"ChatInput","base_classes":["Message"],"display_name":"Chat Input","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"message","display_name":"Message","method":"message_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","store_message","sender","sender_name","session_id","files"],"beta":false,"edited":false},"id":"ChatInput-a8STv"},"selected":false,"width":384,"height":308},{"id":"AIMLAPIEmbeddings-iAzCX","type":"genericNode","position":{"x":-222,"y":362.94377452010247},"data":{"description":"Generate embeddings using AIMLAPI models.","display_name":"OpenAI Embeddings","id":"AIMLAPIEmbeddings-iAzCX","node":{"template":{"_type":"Component","aimlapi_api_key":{"load_from_db":false,"required":false,"placeholder":"","show":true,"value":"8b0c581f30a84fd6842d50bfd2fbed0c","name":"aimlapi_api_key","display_name":"AIMLAPI API Key","advanced":false,"input_types":[],"dynamic":false,"info":"","title_case":false,"password":true,"type":"str"},"aimlapi_api_type":{"load_from_db":false,"required":false,"placeholder":"","show":true,"value":"","name":"aimlapi_api_type","display_name":"AIMLAPI API Type","advanced":true,"input_types":[],"dynamic":false,"info":"","title_case":false,"password":true,"type":"str"},"aimlapi_api_version":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"aimlapi_api_version","display_name":"AIMLAPI API Version","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str"},"aimlapi_base":{"load_from_db":false,"required":false,"placeholder":"","show":true,"value":"","name":"aimlapi_base","display_name":"AIMLAPI Base","advanced":true,"input_types":[],"dynamic":false,"info":"","title_case":false,"password":true,"type":"str"},"aimlapi_organization":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"aimlapi_organization","display_name":"AIMLAPI Organization","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str"},"aimlapi_proxy":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"aimlapi_proxy","display_name":"AIMLAPI Proxy","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str"},"chunk_size":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":1000,"name":"chunk_size","display_name":"Chunk Size","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"int"},"client":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"client","display_name":"Client","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langchain_openai.embeddings.base import OpenAIEmbeddings\r\nfrom openai import OpenAI\r\nfrom langflow.base.embeddings.model import LCEmbeddingsModel\r\nfrom langflow.field_typing import Embeddings\r\nfrom langflow.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\r\n\r\n\r\nclass AIMLAPIEmbeddingsComponent(LCEmbeddingsModel):\r\n    display_name = \"AIMLAPI Embeddings\"\r\n    description = \"Generate embeddings using AIMLAPI models.\"\r\n    icon = \"line-chart\"\r\n    name = \"AIMLAPIEmbeddings\"\r\n\r\n    inputs = [\r\n        DictInput(\r\n            name=\"default_headers\",\r\n            display_name=\"Default Headers\",\r\n            advanced=True,\r\n            info=\"Default headers to use for the API request.\",\r\n        ),\r\n        DictInput(\r\n            name=\"default_query\",\r\n            display_name=\"Default Query\",\r\n            advanced=True,\r\n            info=\"Default query parameters to use for the API request.\",\r\n        ),\r\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\r\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\r\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\r\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\r\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\r\n        DropdownInput(\r\n            name=\"model\",\r\n            display_name=\"Model\",\r\n            advanced=False,\r\n            options=[\r\n                \"text-embedding-3-small\",\r\n                \"text-embedding-3-large\",\r\n                \"text-embedding-ada-002\",\r\n            ],\r\n            value=\"text-embedding-3-small\",\r\n        ),\r\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\r\n        SecretStrInput(name=\"aimlapi_base\", display_name=\"AIMLAPI Base\", advanced=True),\r\n        SecretStrInput(name=\"aimlapi_api_key\", display_name=\"AIMLAPI API Key\", value=\"0f6cfe3d82254c6f83395b4a6bdc32fd\"),\r\n        SecretStrInput(name=\"aimlapi_api_type\", display_name=\"AIMLAPI API Type\", advanced=True),\r\n        MessageTextInput(name=\"aimlapi_api_version\", display_name=\"AIMLAPI API Version\", advanced=True),\r\n        MessageTextInput(\r\n            name=\"aimlapi_organization\",\r\n            display_name=\"AIMLAPI Organization\",\r\n            advanced=True,\r\n        ),\r\n        MessageTextInput(name=\"aimlapi_proxy\", display_name=\"AIMLAPI Proxy\", advanced=True),\r\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\r\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\r\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\r\n        MessageTextInput(\r\n            name=\"tiktoken_model_name\",\r\n            display_name=\"TikToken Model Name\",\r\n            advanced=True,\r\n        ),\r\n        BoolInput(\r\n            name=\"tiktoken_enable\",\r\n            display_name=\"TikToken Enable\",\r\n            advanced=True,\r\n            value=True,\r\n            info=\"If False, you must have transformers installed.\",\r\n        ),\r\n        IntInput(\r\n            name=\"dimensions\",\r\n            display_name=\"Dimensions\",\r\n            info=\"The number of dimensions the resulting output embeddings should have. Only supported by certain models.\",\r\n            advanced=True,\r\n        ),\r\n    ]\r\n\r\n    def build_embeddings(self) -> Embeddings:\r\n        client = OpenAI(\r\n            api_key='0f6cfe3d82254c6f83395b4a6bdc32fd',\r\n            base_url=\"https://api.aimlapi.com\",\r\n        )\r\n        \r\n        class AIMLEmbeddingsWrapper:\r\n            def __init__(self, client, model, default_headers, default_query, deployment, max_retries, request_timeout, show_progress_bar, skip_empty):\r\n                self.client = client\r\n                self.model = model\r\n                self.default_headers = default_headers\r\n                self.default_query = default_query\r\n                self.deployment = deployment\r\n                self.max_retries = max_retries\r\n                self.request_timeout = request_timeout\r\n                self.show_progress_bar = show_progress_bar\r\n                self.skip_empty = skip_empty\r\n\r\n            def embed_documents(self, texts: list[str]) -> list:\r\n                embeddings = []\r\n                for text in texts:\r\n                    response = self.client.embeddings.create(\r\n                        model=self.model,\r\n                        input=text,\r\n                    )\r\n                    embedding = response.data[0].embedding\r\n                    embeddings.append(embedding)\r\n                return embeddings\r\n                \r\n            def embed_query(self, texts: list[str]) -> list:\r\n                embeddings = []\r\n                for text in texts:\r\n                    response = self.client.embeddings.create(\r\n                        model=self.model,\r\n                        input=text,\r\n                    )\r\n                    embedding = response.data[0].embedding\r\n                    embeddings.append(embedding)\r\n                return embeddings[0]\r\n        \r\n        return AIMLEmbeddingsWrapper(\r\n            client,\r\n            self.model,\r\n            self.default_headers,\r\n            self.default_query,\r\n            self.deployment,\r\n            self.max_retries,\r\n            self.request_timeout,\r\n            self.show_progress_bar,\r\n            self.skip_empty\r\n        )","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"default_headers":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":{},"name":"default_headers","display_name":"Default Headers","advanced":true,"dynamic":false,"info":"Default headers to use for the API request.","title_case":false,"type":"dict"},"default_query":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":{},"name":"default_query","display_name":"Default Query","advanced":true,"dynamic":false,"info":"Default query parameters to use for the API request.","title_case":false,"type":"dict"},"deployment":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"deployment","display_name":"Deployment","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str"},"dimensions":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"dimensions","display_name":"Dimensions","advanced":true,"dynamic":false,"info":"The number of dimensions the resulting output embeddings should have. Only supported by certain models.","title_case":false,"type":"int"},"embedding_ctx_length":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":1536,"name":"embedding_ctx_length","display_name":"Embedding Context Length","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"int"},"max_retries":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":3,"name":"max_retries","display_name":"Max Retries","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"int"},"model":{"trace_as_metadata":true,"options":["text-embedding-3-small","text-embedding-3-large","text-embedding-ada-002"],"required":false,"placeholder":"","show":true,"value":"text-embedding-ada-002","name":"model","display_name":"Model","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"str","load_from_db":false},"model_kwargs":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":{},"name":"model_kwargs","display_name":"Model Kwargs","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"dict"},"request_timeout":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"request_timeout","display_name":"Request Timeout","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"float"},"show_progress_bar":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"show_progress_bar","display_name":"Show Progress Bar","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"bool"},"skip_empty":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"skip_empty","display_name":"Skip Empty","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"bool"},"tiktoken_enable":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":true,"name":"tiktoken_enable","display_name":"TikToken Enable","advanced":true,"dynamic":false,"info":"If False, you must have transformers installed.","title_case":false,"type":"bool"},"tiktoken_model_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"tiktoken_model_name","display_name":"TikToken Model Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str"}},"description":"Generate embeddings using AIMLAPI models.","icon":"line-chart","base_classes":["Embeddings"],"display_name":"AIML API Embeddings","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Embeddings"],"selected":"Embeddings","name":"embeddings","display_name":"Embeddings","method":"build_embeddings","value":"__UNDEFINED__","cache":true}],"field_order":["default_headers","default_query","chunk_size","client","deployment","embedding_ctx_length","max_retries","model","model_kwargs","aimlapi_base","aimlapi_api_key","aimlapi_api_type","aimlapi_api_version","aimlapi_organization","aimlapi_proxy","request_timeout","show_progress_bar","skip_empty","tiktoken_model_name","tiktoken_enable","dimensions"],"beta":false,"edited":false},"type":"AIMLAPIEmbeddings"},"selected":false,"width":384,"height":394}],"edges":[{"source":"Prompt-bd0HK","target":"AIMLAPIModel-tsWmW","sourceHandle":"{œdataTypeœ:œPromptœ,œidœ:œPrompt-bd0HKœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œAIMLAPIModel-tsWmWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","id":"reactflow__edge-Prompt-bd0HK{œdataTypeœ:œPromptœ,œidœ:œPrompt-bd0HKœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-AIMLAPIModel-tsWmW{œfieldNameœ:œinput_valueœ,œidœ:œAIMLAPIModel-tsWmWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"sourceHandle":{"dataType":"Prompt","id":"Prompt-bd0HK","name":"prompt","output_types":["Message"]},"targetHandle":{"fieldName":"input_value","id":"AIMLAPIModel-tsWmW","inputTypes":["Message"],"type":"str"}},"selected":false},{"source":"AIMLAPIModel-tsWmW","target":"ChatOutput-A46us","sourceHandle":"{œdataTypeœ:œAIMLAPIModelœ,œidœ:œAIMLAPIModel-tsWmWœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-A46usœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","id":"reactflow__edge-AIMLAPIModel-tsWmW{œdataTypeœ:œAIMLAPIModelœ,œidœ:œAIMLAPIModel-tsWmWœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-A46us{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-A46usœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"ChatOutput-A46us","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"AIMLAPIModel","id":"AIMLAPIModel-tsWmW","name":"text_output","output_types":["Message"]}},"selected":false},{"source":"Pinecone-zqmTC","target":"ParseData-XhkUG","sourceHandle":"{œdataTypeœ:œPineconeœ,œidœ:œPinecone-zqmTCœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-XhkUGœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","id":"reactflow__edge-Pinecone-zqmTC{œdataTypeœ:œPineconeœ,œidœ:œPinecone-zqmTCœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}-ParseData-XhkUG{œfieldNameœ:œdataœ,œidœ:œParseData-XhkUGœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-XhkUG","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"Pinecone","id":"Pinecone-zqmTC","name":"search_results","output_types":["Data"]}},"selected":false},{"source":"ParseData-XhkUG","target":"Prompt-bd0HK","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-XhkUGœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","targetHandle":"{œfieldNameœ:œcontextœ,œidœ:œPrompt-bd0HKœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","id":"reactflow__edge-ParseData-XhkUG{œdataTypeœ:œParseDataœ,œidœ:œParseData-XhkUGœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-bd0HK{œfieldNameœ:œcontextœ,œidœ:œPrompt-bd0HKœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"context","id":"Prompt-bd0HK","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-XhkUG","name":"text","output_types":["Message"]}},"selected":false},{"source":"ChatInput-a8STv","target":"Pinecone-zqmTC","sourceHandle":"{œdataTypeœ:œChatInputœ,œidœ:œChatInput-a8STvœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}","targetHandle":"{œfieldNameœ:œsearch_queryœ,œidœ:œPinecone-zqmTCœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","id":"reactflow__edge-ChatInput-a8STv{œdataTypeœ:œChatInputœ,œidœ:œChatInput-a8STvœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Pinecone-zqmTC{œfieldNameœ:œsearch_queryœ,œidœ:œPinecone-zqmTCœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"search_query","id":"Pinecone-zqmTC","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ChatInput","id":"ChatInput-a8STv","name":"message","output_types":["Message"]}},"selected":false},{"source":"AIMLAPIEmbeddings-iAzCX","target":"Pinecone-zqmTC","sourceHandle":"{œdataTypeœ:œAIMLAPIEmbeddingsœ,œidœ:œAIMLAPIEmbeddings-iAzCXœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}","targetHandle":"{œfieldNameœ:œembeddingœ,œidœ:œPinecone-zqmTCœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}","id":"reactflow__edge-AIMLAPIEmbeddings-iAzCX{œdataTypeœ:œAIMLAPIEmbeddingsœ,œidœ:œAIMLAPIEmbeddings-iAzCXœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Pinecone-zqmTC{œfieldNameœ:œembeddingœ,œidœ:œPinecone-zqmTCœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"embedding","id":"Pinecone-zqmTC","inputTypes":["Embeddings"],"type":"other"},"sourceHandle":{"dataType":"AIMLAPIEmbeddings","id":"AIMLAPIEmbeddings-iAzCX","name":"embeddings","output_types":["Embeddings"]}},"selected":false},{"source":"ChatInput-a8STv","target":"Prompt-bd0HK","sourceHandle":"{œdataTypeœ:œChatInputœ,œidœ:œChatInput-a8STvœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}","targetHandle":"{œfieldNameœ:œquestionœ,œidœ:œPrompt-bd0HKœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","id":"reactflow__edge-ChatInput-a8STv{œdataTypeœ:œChatInputœ,œidœ:œChatInput-a8STvœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-bd0HK{œfieldNameœ:œquestionœ,œidœ:œPrompt-bd0HKœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"question","id":"Prompt-bd0HK","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"ChatInput","id":"ChatInput-a8STv","name":"message","output_types":["Message"]}},"selected":false}],"viewport":{"x":-331.4559295252511,"y":218.73875922707816,"zoom":0.5305775139251897}},"description":"Connect the Dots, Craft Language.","name":"AIML_API_RAG_LANGFLOW","last_tested_version":"1.0.9","endpoint_name":null,"is_component":false}